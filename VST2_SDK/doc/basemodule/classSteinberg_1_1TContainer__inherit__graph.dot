digraph G
{
  bgcolor="transparent";
  edge [fontname="Arial",fontsize="9",labelfontname="Arial",labelfontsize="9"];
  node [fontname="Arial",fontsize="9",shape=record];
  Node1 [label="{TContainer\< T \>\n|# errorObject\l# _size\l|+ TContainer()\l+ TContainer()\l+ ~TContainer()\l+ operator==()\l+ operator!=()\l+ newInstance()\l+ operator[]()\l+ total()\l+ isEmpty()\l+ size()\l+ add()\l+ remove()\l+ remove()\l+ removeAt()\l+ removeAll()\l+ at()\l+ lookup()\l+ contains()\l+ occurrences()\l+ newIterator()\l+ lookupAll()\l+ addAllFrom()\l+ addNewFrom()\l+ error()\l# copy()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node2 [label="{TArrayBase\< T \>\n|+ kDefaultDelta\l+ kExponentialDelta\l# _delta\l# _total\l# _entries\l|+ TArrayBase()\l+ ~TArrayBase()\l+ operator=()\l+ delta()\l+ delta()\l+ enableExponentialGroth()\l+ hasExponentialGroth()\l+ resize()\l+ total()\l+ isEmpty()\l+ add()\l+ remove()\l+ remove()\l+ removeAt()\l+ removeAll()\l+ removeRange()\l+ at()\l+ lookup()\l+ contains()\l+ occurrences()\l+ newIterator()\l+ shouldGo()\l+ index()\l+ first()\l+ last()\l# indexSorted()\l# indexUnsorted()\l# shouldGoSorted()\l# shouldGoUnsorted()\l# doQuickSort()\l# doInsertAt()\l# cmpData()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TArrayBase.html",tooltip="Template array base class."];
  Node2 -> Node3 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node3 [label="{TArray\< T \>\n||+ TArray()\l+ TArray()\l+ TArray()\l+ newInstance()\l+ index()\l+ shouldGo()\l+ insertAt()\l+ replaceAt()\l+ quickSort()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TArray.html",tooltip="Array container template."];
  Node2 -> Node4 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node4 [label="{TOrderedArray\< T \>\n||+ TOrderedArray()\l+ TOrderedArray()\l+ TOrderedArray()\l+ newInstance()\l+ index()\l+ shouldGo()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TOrderedArray.html",tooltip="Ordered Array container template."];
  Node2 -> Node5 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node5 [label="{TSortableArray\< T \>\n|- sorting\l|+ TSortableArray()\l+ TSortableArray()\l+ TSortableArray()\l+ enableSorting()\l+ sortingEnabled()\l+ newInstance()\l+ index()\l+ shouldGo()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TSortableArray.html",tooltip="Sortable Array container template."];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node6 [label="{TBinaryTree\< T \>\n|- _root\l|+ TBinaryTree()\l+ TBinaryTree()\l+ TBinaryTree()\l+ ~TBinaryTree()\l+ newInstance()\l+ operator=()\l+ add()\l+ remove()\l+ remove()\l+ removeAt()\l+ removeAll()\l+ root()\l+ balance()\l+ lookup()\l+ contains()\l+ occurrences()\l+ newIterator()\l- removeNode()\l- balanceHalf()\l- killNode()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TBinaryTree.html",tooltip="TBinaryTree is a rooted binary tree."];
  Node1 -> Node7 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node7 [label="{TBTree\< T \>\n|- _order\l- _root\l|+ TBTree()\l+ TBTree()\l+ TBTree()\l+ ~TBTree()\l+ newInstance()\l+ operator=()\l+ order()\l+ height()\l+ add()\l+ remove()\l+ remove()\l+ removeAt()\l+ removeAll()\l+ lookup()\l+ lookup()\l+ lookupLowerEqual()\l+ contains()\l+ occurrences()\l+ lookupIterator()\l+ newIterator()\l- nodeSearch()\l- lookupNode()\l- lookupNodeLowerEqual()\l- remove()\l- removeNodes()\l- minKeys()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TBTree.html",tooltip="BTree template definition."];
  Node7 -> Node8 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node8 [label="{TBTreeSet\< T \>\n||+ TBTreeSet()\l+ TBTreeSet()\l+ TBTreeSet()\l+ ~TBTreeSet()\l+ operator=()\l+ operator-()\l+ operator&()\l+ operator\|()\l+ add()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TBTreeSet.html",tooltip="B-Tree set template definition."];
  Node1 -> Node9 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node9 [label="{TDLinkedList\< T \>\n|- _first\l- _last\l|+ TDLinkedList()\l+ TDLinkedList()\l+ TDLinkedList()\l+ ~TDLinkedList()\l+ operator=()\l+ newInstance()\l+ add()\l+ append()\l+ prepend()\l+ insertAt()\l+ replaceAt()\l+ remove()\l+ remove()\l+ removeAt()\l+ removeAll()\l+ removeFirst()\l+ removeLast()\l+ insertAfter()\l+ insertBefore()\l+ first()\l+ last()\l+ index()\l+ at()\l+ lookup()\l+ contains()\l+ occurrences()\l+ newIterator()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TDLinkedList.html",tooltip="Doubly linked template list."];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node10 [label="{THashTable\< T \>\n|- _hFunc\l- _total\l- _buckets\l|+ THashTable()\l+ THashTable()\l+ THashTable()\l+ ~THashTable()\l+ operator=()\l+ setHashFunction()\l+ resize()\l+ newInstance()\l+ total()\l+ isEmpty()\l+ add()\l+ remove()\l+ remove()\l+ removeAt()\l+ removeAll()\l+ lookup()\l+ contains()\l+ occurrences()\l+ newIterator()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1THashTable.html",tooltip="Hash Table templateA hash table is a list of buckets."];
  Node10 -> Node11 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node11 [label="{TBag\< T \>\n||+ TBag()\l+ TBag()\l+ TBag()\l+ TBag()\l+ operator=()\l+ add()\l+ add()\l+ remove()\l+ remove()\l+ removeAll()\l+ removeAll()\l+ getCount()\l+ createUniqueSet()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TBag.html",tooltip="Bag template."];
  Node10 -> Node12 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node12 [label="{THashSet\< T \>\n||+ THashSet()\l+ THashSet()\l+ THashSet()\l+ THashSet()\l+ ~THashSet()\l+ operator=()\l+ operator-()\l+ operator&()\l+ operator\|()\l+ add()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1THashSet.html",tooltip="A hash set is a collection of items, without any particular order and without repetitions..."];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node13 [label="{TLinkedList\< T \>\n|- _first\l- _last\l|+ TLinkedList()\l+ TLinkedList()\l+ TLinkedList()\l+ ~TLinkedList()\l+ newInstance()\l+ operator=()\l+ add()\l+ append()\l+ prepend()\l+ insertAt()\l+ replaceAt()\l+ remove()\l+ remove()\l+ removeAt()\l+ removeAll()\l+ removeFirst()\l+ removeLast()\l+ insertAfter()\l+ insertBefore()\l+ first()\l+ last()\l+ index()\l+ at()\l+ lookup()\l+ contains()\l+ occurrences()\l+ newIterator()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TLinkedList.html",tooltip="Single linked list template definition."];
  Node13 -> Node14 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node14 [label="{TDeque\< T \>\n||+ TDeque()\l+ TDeque()\l+ ~TDeque()\l+ operator=()\l+ pushLeft()\l+ pushRight()\l+ popLeft()\l+ popRight()\l+ peekLeft()\l+ peekRight()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TDeque.html",tooltip="TDeque is a double ended queue."];
  Node13 -> Node15 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node15 [label="{TQueue\< T \>\n||+ TQueue()\l+ TQueue()\l+ ~TQueue()\l+ operator=()\l+ enqueue()\l+ dequeue()\l+ peek()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TQueue.html",tooltip="Queue template."];
  Node13 -> Node16 [dir=back,color="midnightblue",fontsize="9",style="solid",arrowtail="empty",fontname="Arial"];
  Node16 [label="{TStack\< T \>\n||+ TStack()\l+ TStack()\l+ ~TStack()\l+ operator=()\l+ push()\l+ pop()\l+ peek()\l}",height=0.2,width=0.4,color="black",URL="$classSteinberg_1_1TStack.html",tooltip="TStack is a template container based on the LIFO-principle (last in/first out)."];
}
